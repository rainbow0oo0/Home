
-- 날짜 : 2025/07/20
-- 이름 : 이준우
-- 내용 : 연습문제 1회 작성 및 정리
-- 실습 1-1 사용자 생성

// select 'Hello Oracle!' From dual;

ALTER SESSION SET "_ORACLE_SCRIPT"=true;
CREATE USER eternal IDENTIFIED BY 1234;
GRANT CONNECT, RESOURCE, UNLIMITED TABLESPACE TO eternal;

-- 실습 1-2 
// drop table customer;
create table customer(
    CID     VARCHAR2(20) PRIMARY KEY,
    NAME    VARCHAR2(20) NOT NULL,
    HP      CHAR(13) UNIQUE,
    ADDRESS VARCHAR2(200),
    RDATE   DATE NOT NULL
); -- customer 테이블 생성
// drop table product

create table product(
    pno     number(4) primary key,
    pname    varchar2(30) not null,
    stock   number default 0,
    price   number,
    company varchar2(20)
); -- product 테이블 생성

drop table orders
create table orders(
    ord_no      number generated by default as identity primary key,
    ord_cid     varchar2(20) not null,
    ord_pno     number(4) not null,
    ord_cnt     number default 1,
    ord_date    date not null
); // orders 테이블 생성

-- 실습 1-3
insert into customer values ('c101', '김유신', '010-1234-1001', '김해시 봉황동', '2022-01-01');
insert into customer values ('c102', '김춘추', '010-1234-1002', '경주시 보문동', '2022-01-02');
insert into customer values ('c103', '장보고', '010-1234-1003', '완도군 청산면', '2022-01-03');
insert into customer values ('c104', '강감찬', '010-1234-1004', '서울시 마포구', '2022-01-04');
insert into customer values ('c105', '이성계', null, null, '2022-01-05');
insert into customer values ('c106', '정철', '010-1234-1006', '경기도 용인시', '2022-01-06');
insert into customer values ('c107', '허준', null, null, '2022-01-07');
insert into customer values ('c108', '이순신', '010-1234-1008', '서울시 영등포구', '2022-01-08');
insert into customer values ('c109', '송상현', '010-1234-1009', '부산시 동래구', '2022-01-09');
insert into customer values ('c110', '정약용', '010-1234-1010', '경기도 광주시', '2022-01-10');

insert into product values (1, '새우깡', 5000, 1500, '농심');
insert into product values (2, '초코파이', 2500, 2500, '오리온');
insert into product values (3, '포카칩', 3600, 1700, '오리온');
insert into product values (4, '양파링', 1250, 1800, '농심');
insert into product values (5, '죠리퐁', 2200, null, '크라운');
insert into product values (6, '마가렛트', 3500, 3500, '롯데');
insert into product values (7, '뿌셔뿌셔', 1650, 1200, '오뚜기');

insert into orders(ord_cid, ord_pno, ord_cnt, ord_date) values ('c102', 3, 2, '2022-07-01 13:15:10');
insert into orders(ord_cid, ord_pno, ord_cnt, ord_date) values ('c101', 4, 1, '2022-07-01 14:16:11');
insert into orders(ord_cid, ord_pno, ord_cnt, ord_date) values ('c108', 1, 1, '2022-07-01 17:23:18');
insert into orders(ord_cid, ord_pno, ord_cnt, ord_date) values ('c109', 6, 5, '2022-07-01 10:46:36');
insert into orders(ord_cid, ord_pno, ord_cnt, ord_date) values ('c102', 2, 1, '2022-07-03 09:15:37');
insert into orders(ord_cid, ord_pno, ord_cnt, ord_date) values ('c101', 7, 3, '2022-07-03 12:35:12');
insert into orders(ord_cid, ord_pno, ord_cnt, ord_date) values ('c110', 1, 2, '2022-07-03 16:35:36');
insert into orders(ord_cid, ord_pno, ord_cnt, ord_date) values ('c104', 2, 4, '2022-07-04 14:23:23');
insert into orders(ord_cid, ord_pno, ord_cnt, ord_date) values ('c102', 1, 3, '2022-07-04 21:54:34');
insert into orders(ord_cid, ord_pno, ord_cnt, ord_date) values ('c107', 6, 1, '2022-07-05 14:21:03');

-- 실습 1-4
select * from customer; // customer 테이블 조회

-- 실습 1-5
select cid, name, hp from customer; // 고객 테이블에서 고객 아이디, 이름, 휴대폰 번호 조회

-- 실습 1-6
select * from product; // product 테이블 조회

-- 실습 1-7
select company from product; // product 테이블에서 company 조회

-- 실습 1-8
select distinct company from product; // product 테이블에서 company 조회

-- 실습 1-9
select pname, price from product; // product 테이블에서 pname, price 조회

-- 실습 1-10
select pname, price + 500 as 조정단가 from product;
// product 테이블 price line +500의 결과값

-- 실습 1-11
select pname, stock, price from product where company = '오리온';
// product 테이블 pname, stockp, price 조회하는데 company line 오리온만 조회

-- 실습 1-12
select ord_pno, ord_cnt, ord_date from orders where ord_cid='c102'
// orders 테이블 pno, cnt, date 중 cid c102만 조회

-- 실습 1-13
select ord_pno, ord_cnt, ord_date from orders where ord_cid='c102' and ord_cnt >= 2;
// orders 테이블 pno, dnt, date 조회하는데 cid 102 line에서 cnt 2보다 크거나 같은것만 조회 

-- 실습 1-14
select * from product where price >= 1000 and price <= 2000;
// product 테이블 price line에 1000 이상 2000이하 조회

-- 실습 1-15
select cid, name, hp, address from customer where name like '김%';
// customer 테이블 cid, name, hp address를 조회하는데 김씨만

-- 실습 1-16
select cid, name, hp, address from customer where name like '__';
// customer 테이블 cid, name, hp, address를 조회하는데 2글자 이름만 조회

-- 실습 1-17
select * from customer where hp is null;
// customer 테이블 hp null만 조회(번호가 입력되지 않은 고객)

-- 실습 1-18
select * from customer where address is not null;
// customer 테이블 address에 not null 조회(주소가 입력된 고객)

-- 실습 1-19
select * from customer order by rdate desc;
// customer 테이블 rdate 내림차순(ASC는 오름차순)

-- 실습 1-20
select * from orders
    where ord_cnt >= 3
    order by ord_cnt desc, ord_pno asc;
// orders 테이블 cnt 3보다 이상 cnt 내림차순 pno 오름차순
// pno가 오름차순이 아닌데 cnt 값이 먼저 높은 순으로 잡고 pno가 다음으로 설정 되는듯

-- 실습 1-21
select avg(price) from product;
// product 테이블 평균값 조회(죠리퐁 price 값이 없어서 6개 값만 sum 6/12,200)

-- 실습 1-22
select sum(stock) as "재고량 합계" from product where company = '농심';
// product 테이블 stock line을 더하는데 농심만 

-- 실습 1-23
select count(*) 고객수 from customer;
// customer 테이블를 조회하는데 고객수라고 나오게 하면서 인원 count
// as 고객수를 넣지 않으면 count(*)라고 나옴

-- 실습 1-24
select count(distinct company) as "제조업체 수" from product;
// product 테이블 company line 중복을 제거한 count

-- 실습 1-25
select
    ord_pno as "주문상품 번호",
    sum(ord_cnt) as "총 주문 수량"
from orders
group by ord_pno
order by ord_pno asc;
// select ord_pno from orders;
// pno line "주문상품 번호" 이름 지정 
// cnt line 이름 "총 주문 수량" 이름 지정 그리고 합계 조회
// orders 테이블을 조회한다
// group by line → ord_pno line 컬럼을 지정 
// ord_pno lin 오름차순

-- 실습 1-26
select
    company as 제조업체,     -- 제조업체라고 이름 지정
    count(*) as 제품수,      -- 제품수라고 이름 지정 중복 제거
    max(price) as 최고가     -- price line Max는 최대 값
from product                -- product 테이블
group by company            -- company 그룹 지정  
order by company asc;       -- company ㄱ, ㄴ, ㄷ, ㄹ~ 오름차순 

-- 실습 1-27
select
    company as 제조업체,   -- company "제조업체"
    count(*) as 제품수,    -- 
    max(price) as 최고가   -- price "최고가" 최대값
from product              -- product 테이블
group by company          -- company 그룹 지정
having count(*) >= 2      -- 제품수가 2이상 조건을 걸었음
order by company desc;    -- 거꾸로 나오게 company 내림차순 응용
// having은 그룹화한 결과에 조건을 걸 때 사용(행 적용)

-- 실습 1-28
select ord_pno, ord_cid, 
    sum(ord_cnt) as "총 주문 수량"   -- cnt의 더한다 "총 주문 수량"
    from orders                   
    group by ord_pno, ord_cid      -- pno, cid 그룹 지정
    order by ord_pno;              -- pno 

-- 실습 1-29
select ord_cid, pname from orders a -- cid, pname를 a라는 별칭으로 지정
    join product b                  -- product 조인하는데 b라는 별칭으로 지정
    on a.ord_pno = b.pno            -- a and b 별칭을 지정한 pno 같은 행끼리 연결
    where ord_cid = 'c102';         -- cid c102만 조회한다
// orders 테이블과 product 테이블을 상품 번호 기준으로 연결해서
// 고객 ID가 'c102'인 주문들의
// 고객 ID(ord_cid)와 상품 이름(pname)만 출력하는 쿼리

-- 실습 1-30
select ord_cid, name, pname, ord_date
    from orders a
    join customer b
        on a.ord_cid = b.cid
    join product c
        on a.ord_pno = c.pno
    -- WHERE TO_CHAR(ord_date, 'YYYY-MM-DD') = '2022-07-03';
    where substr(ord_date, 1, 10) = '2022-07-03'; // ??
